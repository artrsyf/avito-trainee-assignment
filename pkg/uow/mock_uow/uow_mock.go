// Code generated by MockGen. DO NOT EDIT.
// Source: uow.go

// Package mock_uow is a generated GoMock package.
package mock_uow

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUnitOfWorkI is a mock of UnitOfWorkI interface.
type MockUnitOfWorkI struct {
	ctrl     *gomock.Controller
	recorder *MockUnitOfWorkIMockRecorder
}

// MockUnitOfWorkIMockRecorder is the mock recorder for MockUnitOfWorkI.
type MockUnitOfWorkIMockRecorder struct {
	mock *MockUnitOfWorkI
}

// NewMockUnitOfWorkI creates a new mock instance.
func NewMockUnitOfWorkI(ctrl *gomock.Controller) *MockUnitOfWorkI {
	mock := &MockUnitOfWorkI{ctrl: ctrl}
	mock.recorder = &MockUnitOfWorkIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnitOfWorkI) EXPECT() *MockUnitOfWorkIMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockUnitOfWorkI) Begin(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Begin indicates an expected call of Begin.
func (mr *MockUnitOfWorkIMockRecorder) Begin(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockUnitOfWorkI)(nil).Begin), ctx)
}

// Commit mocks base method.
func (m *MockUnitOfWorkI) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockUnitOfWorkIMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockUnitOfWorkI)(nil).Commit))
}

// Exec mocks base method.
func (m *MockUnitOfWorkI) Exec(query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockUnitOfWorkIMockRecorder) Exec(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockUnitOfWorkI)(nil).Exec), varargs...)
}

// ExecContext mocks base method.
func (m *MockUnitOfWorkI) ExecContext(ctx context.Context, query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockUnitOfWorkIMockRecorder) ExecContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockUnitOfWorkI)(nil).ExecContext), varargs...)
}

// Rollback mocks base method.
func (m *MockUnitOfWorkI) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockUnitOfWorkIMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockUnitOfWorkI)(nil).Rollback))
}
