// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/artrsyf/avito-trainee-assignment/internal/purchase/domain/entity"
	model "github.com/artrsyf/avito-trainee-assignment/internal/purchase/domain/model"
	gomock "github.com/golang/mock/gomock"
)

// MockPurchaseRepositoryI is a mock of PurchaseRepositoryI interface.
type MockPurchaseRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockPurchaseRepositoryIMockRecorder
}

// MockPurchaseRepositoryIMockRecorder is the mock recorder for MockPurchaseRepositoryI.
type MockPurchaseRepositoryIMockRecorder struct {
	mock *MockPurchaseRepositoryI
}

// NewMockPurchaseRepositoryI creates a new mock instance.
func NewMockPurchaseRepositoryI(ctrl *gomock.Controller) *MockPurchaseRepositoryI {
	mock := &MockPurchaseRepositoryI{ctrl: ctrl}
	mock.recorder = &MockPurchaseRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPurchaseRepositoryI) EXPECT() *MockPurchaseRepositoryIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPurchaseRepositoryI) Create(ctx context.Context, purchase *entity.Purchase) (*model.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, purchase)
	ret0, _ := ret[0].(*model.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPurchaseRepositoryIMockRecorder) Create(ctx, purchase interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPurchaseRepositoryI)(nil).Create), ctx, purchase)
}

// GetProductByType mocks base method.
func (m *MockPurchaseRepositoryI) GetProductByType(ctx context.Context, purchaseTypeName string) (*model.PurchaseType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByType", ctx, purchaseTypeName)
	ret0, _ := ret[0].(*model.PurchaseType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByType indicates an expected call of GetProductByType.
func (mr *MockPurchaseRepositoryIMockRecorder) GetProductByType(ctx, purchaseTypeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByType", reflect.TypeOf((*MockPurchaseRepositoryI)(nil).GetProductByType), ctx, purchaseTypeName)
}

// GetPurchasesByUserID mocks base method.
func (m *MockPurchaseRepositoryI) GetPurchasesByUserID(ctx context.Context, userID uint) (entity.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPurchasesByUserID", ctx, userID)
	ret0, _ := ret[0].(entity.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPurchasesByUserID indicates an expected call of GetPurchasesByUserID.
func (mr *MockPurchaseRepositoryIMockRecorder) GetPurchasesByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPurchasesByUserID", reflect.TypeOf((*MockPurchaseRepositoryI)(nil).GetPurchasesByUserID), ctx, userID)
}
