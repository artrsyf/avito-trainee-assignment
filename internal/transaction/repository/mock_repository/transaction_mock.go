// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/artrsyf/avito-trainee-assignment/internal/transaction/domain/entity"
	model "github.com/artrsyf/avito-trainee-assignment/internal/transaction/domain/model"
	uow "github.com/artrsyf/avito-trainee-assignment/pkg/uow"
	gomock "github.com/golang/mock/gomock"
)

// MockTransactionRepositoryI is a mock of TransactionRepositoryI interface.
type MockTransactionRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryIMockRecorder
}

// MockTransactionRepositoryIMockRecorder is the mock recorder for MockTransactionRepositoryI.
type MockTransactionRepositoryIMockRecorder struct {
	mock *MockTransactionRepositoryI
}

// NewMockTransactionRepositoryI creates a new mock instance.
func NewMockTransactionRepositoryI(ctrl *gomock.Controller) *MockTransactionRepositoryI {
	mock := &MockTransactionRepositoryI{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepositoryI) EXPECT() *MockTransactionRepositoryIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransactionRepositoryI) Create(ctx context.Context, uow uow.Executor, transaction *model.Transaction) (*model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, uow, transaction)
	ret0, _ := ret[0].(*model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTransactionRepositoryIMockRecorder) Create(ctx, uow, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransactionRepositoryI)(nil).Create), ctx, uow, transaction)
}

// GetReceivedByUserID mocks base method.
func (m *MockTransactionRepositoryI) GetReceivedByUserID(ctx context.Context, userID uint) (entity.ReceivedHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceivedByUserID", ctx, userID)
	ret0, _ := ret[0].(entity.ReceivedHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceivedByUserID indicates an expected call of GetReceivedByUserID.
func (mr *MockTransactionRepositoryIMockRecorder) GetReceivedByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceivedByUserID", reflect.TypeOf((*MockTransactionRepositoryI)(nil).GetReceivedByUserID), ctx, userID)
}

// GetSentByUserID mocks base method.
func (m *MockTransactionRepositoryI) GetSentByUserID(ctx context.Context, userID uint) (entity.SentHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSentByUserID", ctx, userID)
	ret0, _ := ret[0].(entity.SentHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSentByUserID indicates an expected call of GetSentByUserID.
func (mr *MockTransactionRepositoryIMockRecorder) GetSentByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentByUserID", reflect.TypeOf((*MockTransactionRepositoryI)(nil).GetSentByUserID), ctx, userID)
}
