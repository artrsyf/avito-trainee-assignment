// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/artrsyf/avito-trainee-assignment/internal/user/domain/entity"
	model "github.com/artrsyf/avito-trainee-assignment/internal/user/domain/model"
	uow "github.com/artrsyf/avito-trainee-assignment/pkg/uow"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepositoryI is a mock of UserRepositoryI interface.
type MockUserRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryIMockRecorder
}

// MockUserRepositoryIMockRecorder is the mock recorder for MockUserRepositoryI.
type MockUserRepositoryIMockRecorder struct {
	mock *MockUserRepositoryI
}

// NewMockUserRepositoryI creates a new mock instance.
func NewMockUserRepositoryI(ctrl *gomock.Controller) *MockUserRepositoryI {
	mock := &MockUserRepositoryI{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryI) EXPECT() *MockUserRepositoryIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepositoryI) Create(ctx context.Context, user *entity.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryIMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepositoryI)(nil).Create), ctx, user)
}

// GetByID mocks base method.
func (m *MockUserRepositoryI) GetByID(ctx context.Context, id uint) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserRepositoryIMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserRepositoryI)(nil).GetByID), ctx, id)
}

// GetByUsername mocks base method.
func (m *MockUserRepositoryI) GetByUsername(ctx context.Context, username string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", ctx, username)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockUserRepositoryIMockRecorder) GetByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockUserRepositoryI)(nil).GetByUsername), ctx, username)
}

// Update mocks base method.
func (m *MockUserRepositoryI) Update(ctx context.Context, uow uow.Executor, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, uow, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryIMockRecorder) Update(ctx, uow, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepositoryI)(nil).Update), ctx, uow, user)
}
